#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

x-superset-env-file: &superset-env-file ./config/.env-superset
x-spark-env-file: &spark-env-file ./config/.env-spark
x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:${TAG:-latest-dev}
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes:
  &superset-volumes
  - ./docker:/app/docker
  - ./config/superset_config.py:/app/pythonpath/superset_config.py
  - superset_home:/app/superset_home

version: '3.7'
services:
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  db:
    env_file: *superset-env-file
    image: postgres:15
    container_name: superset_db
    restart: unless-stopped
    ports:
      - '5432:5432'
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./databases/dump.sql:/docker-entrypoint-initdb.d/dump.sql


  superset:
    env_file: *superset-env-file
    image: *superset-image
    container_name: superset_app
    command: ['/app/docker/docker-bootstrap.sh', 'app-gunicorn']
    user: 'root'
    restart: unless-stopped
    ports:
      - '8088:8088'
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: ['/app/docker/docker-init.sh']
    env_file: *superset-env-file
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      disable: true

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: ['/app/docker/docker-bootstrap.sh', 'worker']
    env_file: *superset-env-file
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME',
        ]

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: ['/app/docker/docker-bootstrap.sh', 'beat']
    env_file: *superset-env-file
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: 'root'
    volumes: *superset-volumes
    healthcheck:
      disable: true

  spark:
    image: docker.io/bitnami/spark:3.5
    env_file: *spark-env-file
    environment:
      - SPARK_MODE=master
    volumes:
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    ports:
      - '8080:8080'

  spark-worker:
    image: docker.io/bitnami/spark:3.5
    env_file: *spark-env-file
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=8G
      - SPARK_WORKER_CORES=8
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    ports:
      - '8081:8081'

  jupyter:
    image: 'jupyter/pyspark-notebook'
    env_file: *spark-env-file
    environment:
      - SPARK_CONF_DIR=/conf
    command: "start-notebook.sh --NotebookApp.token='token'"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./config/spark-defaults.conf:/conf/spark-defaults.conf
    ports:
      - '8888:8888'
      - '4040:4040'
      - '10000:10000'

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
